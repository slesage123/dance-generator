<html>

<head>
  <meta charset="UTF-8">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.6.0/p5.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.6.0/addons/p5.dom.min.js"></script>
  <script src="https://unpkg.com/ml5@0.1.1/dist/ml5.min.js" type="text/javascript"></script>
  <link rel="stylesheet" type="text/css" href="style.css">
  
</head>

<body>
  <p id='status'>Loading model...</p>
  <script src="p5.sound.min.js"></script>
  <script src="sketch.js"></script>
</body>

</html>

html, body {
  margin: 0;
  padding: 0;
}
canvas {
  display: block;
}

let video;
let poseNet;
let poses = [];
let rightWristX=0;
let rightWristY=0;
let leftWristX=0;
let leftWristY=0;
let sound;
let amplitude;
let noseX=0;
let noseY=0;


// function preload() {
//   soundFormats('mp3', 'ogg');
//   sound = loadSound('Buttercup.mp3');
// }

function setup() {
  createCanvas(windowWidth, windowHeight);
  startColor = color(0,0,0);
  newColor = color(random(255),random(255),random(255));
  amt = 0;
  
  console.log('Play Your Favorite Songs Through The Mic c:')

  background(startColor);
  
  //sound stuff
  amplitude=new p5.AudioIn()
  amplitude.start()
  //video in
  video = createCapture(VIDEO);
  video.size(width, height);
  // Create a new poseNet method with a single detection
  poseNet = ml5.poseNet(video, modelReady);
  // This sets up an event that fills the global variable "poses"
  // with an array every time new poses are detected
  poseNet.on('pose', function(results) {
    poses = results;
  });
  // Hide the video element, and just show the canvas
  video.hide();
  
  poseNet.on('pose',gotPoses)
}

// function mousePressed(){
//   sound.setVolume(0.1);
//   sound.play();
// }

function gotPoses(poses){
  // console.log(poses)
  if(poses.length>0){
  let newX = rightWristX =poses[0].pose.keypoints[10].position.x;
  let newY = rightWristY =poses[0].pose.keypoints[10].position.y;
    lerp(rightWristX, newX ,0.5);
    lerp(rightWristY, newX ,0.5);
    
  let newerX = leftWristX =poses[0].pose.keypoints[9].position.x;
  let newerY = leftWristY =poses[0].pose.keypoints[9].position.y;
    lerp(leftWristX, newerX ,0.5);
    lerp(leftWristY, newerX ,0.5);
    
  let newishX = noseX =poses[0].pose.keypoints[0].position.x;
  let newishY = noseY =poses[0].pose.keypoints[0].position.y;
    lerp(leftWristX, newishX ,0.5);
    lerp(leftWristY, newishX ,0.5);
    
  }
}

function modelReady() {
  select('#status').html('Model Loaded');
}

function draw() {
  // image(video, 0, 0, width, height);
  // filter(ERODE)
  

  
  let level=amplitude.getLevel();
  // console.log(level)
  background((lerpColor(startColor, newColor, amt)),2);
  amt += 0.01;
  if(amt >= 1){
    amt = 0.0;
    startColor = newColor;
    newColor = color(random(255),random(255),random(255),2);
  }
  
  noStroke();
  fill(0,random(0,255),random(0,255))
  ellipse(rightWristX,rightWristY,(level*1100),(level*1100))
  fill(0,random(0,255),random(0,255))
  ellipse(leftWristX,leftWristY,(level*1100),(level*1100))
  
  fill(random(0,255),0,random(0,255))
  ellipse(noseX,noseY,(level*2000),(level*2000))


  // We can call both functions to draw all keypoints and the skeletons
  // drawKeypoints();
  // drawSkeleton();
}

// A function to draw ellipses over the detected keypoints
function drawKeypoints()  {
  // Loop through all the poses detected
  for (let i = 0; i < poses.length; i++) {
    // For each pose detected, loop through all the keypoints
    let pose = poses[i].pose;
    for (let j = 0; j < pose.keypoints.length; j++) {
      // A keypoint is an object describing a body part (like rightArm or leftShoulder)
      let keypoint = pose.keypoints[j];
      // Only draw an ellipse is the pose probability is bigger than 0.2
      if (keypoint.score > 0.2) {
        fill(255, 0, 0);
        noStroke();
        ellipse(keypoint.position.x, keypoint.position.y, 10, 10);
      }
    }
  }
}

// A function to draw the skeletons  
function drawSkeleton() {
  // Loop through all the skeletons detected
  for (let i = 0; i < poses.length; i++) {
    let skeleton = poses[i].skeleton;
    // For every skeleton, loop through all body connections
    for (let j = 0; j < skeleton.length; j++) {
      let partA = skeleton[j][0];
      let partB = skeleton[j][1];
      stroke(255, 0, 0);
      line(partA.position.x, partA.position.y, partB.position.x, partB.position.y);
    }
  }
}

